service: nedered

plugins:
  -serverless-appsync-plugin
  -serverless-pseudo-parameters

custom:
  tableName: "camped-table-${sls:stage}"
  # myRegion: ap-south-1
  # myDDB: Users
  # myPool: my-userpool-name

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: ap-south-1
  profile: registration
  # lambdaHashingVersion: 20201221
  httpApi:
    cors: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [CampedTable, Arn]
            - "*"

  environment:
    CAMPED_TABLE: ${self:custom.tableName}
    REGION: ${self:provider.region}
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }

functions:
  newlambda:
    handler: src/dynamodb/index.lambda
    events:
      - UserPool:
          pool: demo-pool
          trigger: PostConfirmation
          existing: true
    role: CustomUserOnboardingRole

  # loginUser:
  #   handler: src/login.handler
  #   events:
  #     - http:
  #         path: /login
  #         method: post
  #         cors: true

          # authorizer:
          #   name: PrivateAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn:
          #     Fn::GetAtt:
          #       - UserPool
          #       - Arn
          #   claims:
          #     - email

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: demo-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - AttributeDataType: String
            Mutable: true
            Name: collegeName
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: demo-user-client
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    CognitoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: collegeName
            AttributeType: S
          - AttributeName: username
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: collegeName
            KeyType: HASH
          - AttributeName: username
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}

        GlobalSecondaryIndexes:
          - IndexName: "camped"
            KeySchema:
              - AttributeName: 'email'
                KeyType: "HASH"
            Projection:
              ProjectionType: ALL

    CustomUserOnboardingRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: CustomUserOnboardingRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: CustomCloudWatchLogsPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
          - PolicyName: CustomUserOnboardingPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:dynamodb'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                       

